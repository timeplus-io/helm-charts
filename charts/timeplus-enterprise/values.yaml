global:
  # -- See https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#nodeselector
  nodeSelector: {}

  # -- See https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/
  tolerations: []

  # -- This is the global affinity settings. Once set, it will be applied to every single component.
  # If you'd like to set affinity for each component, you can set `affinity` under component name. For example
  # you can use `timeplusd.affinity` to control the affinity of timeplusd
  # Refer to https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/
  affinity: &globalAffinity {}

  # -- This setting is available for each component as well.
  imageRegistry: &globalImageRegistry "docker.timeplus.com"

  # -- This setting is available for each component as well.
  imagePullPolicy: &globalImagePullPolicy "IfNotPresent"

  # -- This applies to all pods
  imagePullSecrets: []

  # -- Only valid with k8s >= 1.27.0. Ref: https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/#persistentvolumeclaim-retention
  pvcDeleteOnStsDelete: false

  # -- Only valid with k8s >= 1.27.0. Ref: https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/#persistentvolumeclaim-retention
  pvcDeleteOnStsScale: false

provision:
  # -- Provision job will ONLY be run once after the first installation if it is enabled. A Job will be created to provision default resources such as licenses.
  # This Job shares the same configurations (e.g. resource limit) as `timeplusCli` below.
  # Disable it during installation and re-enable it later won't work.
  enabled: false

  # license:
  #   key: license_key
  #   file: |
  #     -----BEGIN LICENSE FILE-----
  #     LICENSE CONTENT
  #     -----END LICENSE FILE-----

# Timeplus core services
timeplusAppserver:
  # Timeplus connector will not work properly if Timeplus appserver is not enabled.
  enabled: true

  enabledAIService: false

  image: timeplus/timeplus-appserver

  # -- Configurations for appserver. e.g. `enable-authentication: true`. See https://docs.timeplus.com/server_config#appserver
  configs: {}

  service:
    type: ClusterIP
    clusterIP: null
    nodePort: null

  # -- Extra containers that to be run together with the main container.
  extraContainers: []

  # -- Extra volumes that to be mounted
  extraVolumes: []

  # @ignored
  replicas: 1

  # @ignored
  tag: 3.0.21
  # @ignored
  imageRegistry: *globalImageRegistry
  # @ignored
  imagePullPolicy: *globalImagePullPolicy
  # @ignored
  securityContext: {}
  # @ignored
  labels: {}
  # @ignored
  annotations: {}
  # @ignored
  resources: {}
  # @ignored
  affinity: *globalAffinity

timeplusd:
  enabled: true

  image: timeplus/timeplusd

  # -- A typical deployment contains 1, 3, or 5 replicas. The max number of Metadata node is 3. If you specify more than 3 replicas, the first 3 will always be Metadata and Data node and the rest of them will be Data node only.
  replicas: 3

  # -- Compute node
  computeNode:
    replicas: 0

    # @ignored
    # -- Once autocaling is enabled, the `timeplusd.computeNode.replicas` setting will be ignored.
    # -- Please refer to https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/
    autoscaling:
      enabled: false
      minReplicas: 1
      maxReplicas: 5
      targetCPUUtilizationPercentage: 80
      targetMemoryUtilizationPercentage: 80

    # -- Configurations for timeplusd compute node. See https://docs.timeplus.com/server_config#timeplusd
    config: {}
    resources:
      limits:
        cpu: "32"
        memory: "60Gi"
      requests:
        cpu: "2"
        memory: 4Gi

  # advertisedHost:
  #   timeplusd-0: 192.0.0.1
  #   timeplusd-1: 192.0.0.2
  #   timeplusd-2: 192.0.0.3

  # locality:
  #   nodeName1: "region=us-east-1,datacenter=us-east-1a"
  #   nodeName2: "region=us-east-2,datacenter=us-east-2a"
  #   nodeName3: "region=us-west-1,datacenter=us-west-1a"

  metadataNodeQuorum: null

  # @ignored
  # This cannot be changed
  defaultAdminUsername: proton

  # -- Timeplus appserver will use this username and password to connect to timeplusd to perform some administration operations such as user management.
  defaultAdminPassword: timeplusd@t+

  # -- Extra init containers. It will be run before other init containers.
  extraInitContainers: []

  # -- Extra containers that to be run together with the main container.
  extraContainers: []

  # -- Extra volumes that to be mounted
  extraVolumes: []

  # -- Extra environment variables
  extraEnvs: []

  # -- Extra users
  extraUsers: {}

  serviceAccountName: ""

  initJob:
    image: timeplus/boson

    # @ignored
    tag: 0.0.2
    # @ignored
    imageRegistry: *globalImageRegistry
    # @ignored
    imagePullPolicy: *globalImagePullPolicy
    # @ignored
    resources: {}

  service:
    # -- Update type to `NodePort` if you want to access timeplusd directly (rest API, metrics, and etc.)
    type: ClusterIP

    # -- Set clusterIP to be `None` to create a headless service.
    clusterIP: null

    # -- This is the port that timeplusd client can connect to. For example you can `timeplusd client --port 30863`.
    nodePort: 30863

  storage:
    # -- PV settings for logs.
    log:
      # -- When disabled, log will be written to stream storage (/var/lib/timeplusd/nativelog)
      enabled: true
      className: local-storage
      size: 30Gi
      subPath: ./
      selector:
        matchLabels:
          app: timeplusd-log

    # -- PV settings for streaming storage.
    stream:
      className: local-storage
      size: 100Gi
      nativelogSubPath: ./
      metastoreSubPath: ./
      selector:
        matchLabels:
          app: timeplusd-data-stream

    # -- PV settings for historical storage.
    history:
      className: local-storage
      size: 100Gi
      subPath: ./
      selector:
        matchLabels:
          app: timeplusd-data-history

  # -- Make sure at least 2 cores are assigned to each timeplusd
  resources:
    limits:
      cpu: "32"
      memory: "60Gi"
    requests:
      cpu: "2"
      memory: 4Gi

  # -- Configurations for timeplusd. See https://docs.timeplus.com/server_config#timeplusd
  config: {}

  # -- K8s liveness probe for timeplusd. Please refer to https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
  livenessProbe:
    failureThreshold: 20
    httpGet:
      path: /timeplusd/ping
      port: http-streaming
      scheme: HTTP
    initialDelaySeconds: 30
    periodSeconds: 30
    successThreshold: 1
    timeoutSeconds: 1

  enableCoreDump: false

  # -- Don't start timeplusd automatically when pod is up. Instead, just run sleep command so that you can exec into the pod to debug.
  sleep: false

  # @ignored
  tag: 3.0.1
  # @ignored
  imageRegistry: *globalImageRegistry
  # @ignored
  imagePullPolicy: *globalImagePullPolicy
  # @ignored
  securityContext: {}
  # @ignored
  # -- Control both timeplusd and init job
  affinity: *globalAffinity
  # @ignored
  labels: {}
  # @ignored
  annotations: {}

timeplusConnector:
  enabled: true

  image: timeplus/timeplus-connector

  # -- Extra containers that to be run together with the main container.
  extraContainers: []

  # -- Extra volumes that to be mounted
  extraVolumes: []

  # -- With this default config map, the logs will be written to local ephemeral volume.
  # You can set configMap to be `null` and the logs will be written to stdout. However, you will not be able to view logs of the source and sink on UI if it is `null`.
  configMap:
    logger:
      level: INFO
      add_timestamp: true
      file:
        rotate: true
        path: "/timeplus/connector-server.log"
        rotate_max_age_days: 1

  # @ignored
  tag: 3.0.0
  # @ignored
  imageRegistry: *globalImageRegistry
  # @ignored
  imagePullPolicy: *globalImagePullPolicy
  # @ignored
  securityContext: {}
  # @ignored
  labels: {}
  # @ignored
  annotations: {}
  # @ignored
  affinity: *globalAffinity
  # @ignored
  resources: {}

timeplusCli:
  enabled: false

  image: timeplus/timeplus-cli

  # @ignored
  tag: 3.0.0
  # @ignored
  imageRegistry: *globalImageRegistry
  # @ignored
  imagePullPolicy: *globalImagePullPolicy
  # @ignored
  securityContext: {}
  # @ignored
  affinity: *globalAffinity
  # @ignored
  labels: {}
  # @ignored
  resources: {}

ingress:
  # -- Only Nginx controller is tested. https://kubernetes.github.io/ingress-nginx/
  # ingressClassName: nginx

  # Uncomment the tls section below to enable https.
  # You will need to follow
  #   1. https://kubernetes.io/docs/concepts/services-networking/ingress/#tls
  #   2. https://kubernetes.github.io/ingress-nginx/user-guide/tls/
  # to create a k8s secret that contains certificate and private key
  # tls:
  #   - hosts: [timeplus.local]
  #   secretName: "secret-name"

  appserver:
    enabled: false

    # -- Must be a DNS name, not an IP address
    # -- If you want use an ip, please remove it. it's will match all (equal *).
    domain: null

  timeplusd:
    # -- Enable ingress if you want to connect to timeplusd directly
    # -- To send REST API call to timeplusd, the URL will be http(s)://<publicDomain>:<port><restPath>
    # e.g.
    #   - curl http://timeplus.local/timeplusd/info
    #   - curl http://timeplus.local/timeplusd/v1/ddl/streams
    enabled: false

    # -- Must be a DNS name, not an IP address
    # -- If you want use an ip, please remove it. it's will match all (equal *).
    domain: null

    # -- timeplusd server listen on `/` by default for snapshot endpoint. It conflicts with the `appserver`. In order to use http snapshot feature, you need to either
    # --   * create a new ingress rewrite rule to get rid of the `snapshot` prefix
    # --   * update thte `httpSnapshotPath` to be `/` and use different domain for appserver and timeplusd ingress
    httpSnapshotPath: "/snapshot"

  # @ignored
  labels: {}

prometheus_metrics:
  enabled: false
  remote_write_endpoint: http://timeplus-prometheus:80

  vector:
    image: timberio/vector
    # @ignored
    tag: 0.34.0-distroless-libc
    # @ignored
    imageRegistry: *globalImageRegistry
    # @ignored
    imagePullPolicy: *globalImagePullPolicy
    # @ignored
    resources: {}

# @ignored
debug:
  commonConfig:
    imageRegistry: *globalImageRegistry
    imagePullPolicy: *globalImagePullPolicy
    image: timeplus/boson
    tag: 0.0.2
    resources:
      limits:
        # -- Deletion of data may consume lots of memory, for fix pod Out-Of-Memory killer (exit 137)
        memory: "512Mi"
        cpu: "1"
      requests:
        memory: "128Mi"
        cpu: "500m"

  timeplusd:
    enabled: false
